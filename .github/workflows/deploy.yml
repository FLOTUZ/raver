name: Deploy Next.js to EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # 1. Clonar el repositorio
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Configurar Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"

      # 3. Cachear dependencias de Node.js
      - name: Cache Node.js modules
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # 4. Instalar dependencias sin ejecutar postinstall
      - name: Install dependencies
        run: npm install --ignore-scripts

      # 5. Generar Prisma Client
      - name: Generate Prisma Client
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: npx prisma generate

      # 6. Cache de Next.js (opcional para builds más rápidos)
      - name: Cache Next.js build
        uses: actions/cache@v3
        with:
          path: .next/cache
          key: nextjs-${{ github.sha }}
          restore-keys: |
            nextjs-

      # 7. Build limpio de Next.js
      - name: Clean and Build Next.js
        run: rm -rf .next && npm run build

      # 8. Ejecutar migraciones de Prisma
      - name: Run Prisma Migrations
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: npx prisma migrate deploy

      # 9. Listar archivos para deploy (sin .next)
      - name: List files for deploy
        run: tree -L 2

      # 10. Copiar archivos a EC2
      - name: Copy files to EC2
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          source: ".next package.json package-lock.json prisma"
          target: "/home/ubuntu/app"

      # 11. Conectarse a EC2 y reiniciar la app con PM2
      - name: SSH and restart app
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_KEY }}
          script: |
            cd /home/ubuntu/app
            npm ci --omit=dev
            pm2 stop app || true
            pm2 start npm --name "app" -- start
            pm2 save
